package com.projects.bestpractices;

import java.util.Calendar;
import java.util.Date;

public class User {

	private static final String OK = "Updated";
	private static final String FAIL = "Fail";
	private static final String FAILINGOKK = "FailOK";

	private String mockDataBase;

	private boolean hasConfirmedEmail;

	private boolean hasActiveAccount;

	private boolean isLoggedIn;

	private boolean hasPremiumAccount;

	private boolean statusAutoGenerated;

	private Date lastStatusChange;

	public User() {
		super();
	}

	public String getMockDataBase() {
		return mockDataBase;
	}

	public void setMockDataBase(String mockDataBase) {
		this.mockDataBase = mockDataBase;
	}

	public boolean isHasConfirmedEmail() {
		return hasConfirmedEmail;
	}

	public void setHasConfirmedEmail(boolean hasConfirmedEmail) {
		this.hasConfirmedEmail = hasConfirmedEmail;
	}

	public boolean isHasActiveAccount() {
		return hasActiveAccount;
	}

	public void setHasActiveAccount(boolean hasActiveAccount) {
		this.hasActiveAccount = hasActiveAccount;
	}

	public boolean isLoggedIn() {
		return isLoggedIn;
	}

	public void setLoggedIn(boolean isLoggedIn) {
		this.isLoggedIn = isLoggedIn;
	}

	public boolean isHasPremiumAccount() {
		return hasPremiumAccount;
	}

	public void setHasPremiumAccount(boolean hasPremiumAccount) {
		this.hasPremiumAccount = hasPremiumAccount;
	}

	public boolean isStatusAutoGenerated() {
		return statusAutoGenerated;
	}

	public void setStatusAutoGenerated(boolean statusAutoGenerated) {
		this.statusAutoGenerated = statusAutoGenerated;
	}

	public Date getLastStatusChange() {
		return lastStatusChange;
	}

	public void setLastStatusChange(Date lastStatusChange) {
		this.lastStatusChange = lastStatusChange;
	}

	public boolean setStatus(String status) {

		this.setMockDataBase("UPDATE");
		return true;
	}

	public String updateStatus(String status, User user) {
		Calendar now = Calendar.getInstance();
		now.add(Calendar.DAY_OF_MONTH, -1);
		if (user.hasActiveAccount) {
			if (user.hasConfirmedEmail) {
				if (user.isLoggedIn) {
					if (user.hasPremiumAccount) {
						if (!user.statusAutoGenerated) {
							if (user.lastStatusChange.before(now.getTime())) {
								if (user.setStatus(status)) {
									return "Updated";
								}
							}
						}
					}
				}
			}
		}
		return "Fail";
	}

	public String updateStatusV2(String status, User user) {
		if (!canUpdateStatus(user))
			return FAIL;
		if (!user.setStatus(status))
			return FAIL;
		return OK;
	}

	/**
	 * go home
	 * @param user
	 * @return
	 */
	public static boolean canUpdateStatus(User user) {
		Calendar now = Calendar.getInstance();
		now.add(Calendar.DAY_OF_MONTH, -1);
		if (!user.isLoggedIn)
			return false;
		if (!user.hasActiveAccount)
			return false;
		if (!user.hasConfirmedEmail)
			return false;
		if (!user.hasPremiumAccount)
			return false;
		if (user.statusAutoGenerated)
			return false;
		if (!user.lastStatusChange.before(now.getTime()))
			return false;
		return true;
	}
}
